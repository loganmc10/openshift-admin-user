- name: Install python packages
  ansible.builtin.pip:
    name:
      - kubernetes
      - passlib
      - bcrypt

- name: Check for existing user
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: htpass-secret
    namespace: openshift-config
  register: admin_user
  until: admin_user is not failed

- name: Create user
  when: (admin_user.resources | length | int == 0) or (force is defined)
  block:
    - name: Create secret
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: htpass-secret
            namespace: openshift-config
          type: Opaque
          data:
            htpasswd: "{{ ('admin:' + (admin_password | default('admin')) | password_hash(hashtype='blowfish', ident='2y')) | b64encode }}"
        apply: true
        force: true
        state: present
      register: k8s_result
      until: k8s_result is not failed

    - name: Update OAuth
      kubernetes.core.k8s:
        definition:
          apiVersion: config.openshift.io/v1
          kind: OAuth
          metadata:
            name: cluster
          spec:
            identityProviders:
              - name: my_htpasswd_provider
                mappingMethod: claim
                type: HTPasswd
                htpasswd:
                  fileData:
                    name: htpass-secret
        state: present
      register: k8s_result
      until: k8s_result is not failed

    - name: Create cluster-admins group
      kubernetes.core.k8s:
        definition:
          apiVersion: user.openshift.io/v1
          kind: Group
          metadata:
            name: cluster-admins
          users:
            - admin
        apply: true
        state: present
      register: k8s_result
      until: k8s_result is not failed

    - name: Grant cluster-admin
      kubernetes.core.k8s:
        definition:
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRoleBinding
          metadata:
            name: admin-cluster-admin
          subjects:
            - kind: Group
              name: cluster-admins
              apiGroup: rbac.authorization.k8s.io
          roleRef:
            kind: ClusterRole
            name: cluster-admin
            apiGroup: rbac.authorization.k8s.io
        apply: true
        state: present
      register: k8s_result
      until: k8s_result is not failed

- name: Remove kubeadmin user
  when: remove_kubeadmin | bool
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: kubeadmin
        namespace: kube-system
    state: absent
  register: k8s_result
  until: k8s_result is not failed
